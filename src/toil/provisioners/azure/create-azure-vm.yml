# Copyright (C) 2018 UCSC Computational Genomics Lab
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Launch Azure VM
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    dnsname: '{{ vmname }}.westus.cloudapp.azure.com'
    # The DNS name might not be right depending on your region!!
    ip: "{{ lookup ('dig', '{{ dnsname }}') }}"

  tasks:
  - debug: msg="Public DNS name {{ dnsname }} resolved to IP {{ ip }}."
# The following check is disabled so that the playbook does not stop upon existence of DNS name. Otherwise
# it cannot be re-run after VM creation
#  - name: Check if DNS is taken
#    fail: msg="That DNS name seems to be already taken"
#    when: ip != 'NXDOMAIN'

  # TODO: Authentication error when making new resource groups
  - name: Create a resource group
    tags:
      - leader
    # We use resource groups to identify all instances in a cluster.
    azure_rm_resourcegroup:
      name: "{{ resgrp }}"
      location: "{{ region }}"
      state: present

  - name: Create security group that allows SSH and HTTP
    tags:
      - leader
    # All instances in a security group can communicate with each other by default,
    # so we don't have to touch that. All we have to do is open port 22 for SSH.
    azure_rm_securitygroup:
      resource_group: "{{ resgrp }}"
      name: "{{ resgrp }}"
      rules:
        - name: SSH
          protocol: Tcp
          destination_port_range: 22
          access: Allow
          priority: 101
          direction: Inbound

  - name: Create a virtual network
    tags:
      - leader
    # We don't need to run the above two steps if we're adding worker nodes.
    azure_rm_virtualnetwork:
      name: "{{ resgrp }}"
      resource_group: '{{ resgrp }}'
      address_prefixes: '192.168.0.0/16'
      state: present

  - name: Create a subnet
    tags:
      - leader
    azure_rm_subnet:
      name: "{{ vmname }}"
      virtual_network_name: "{{ resgrp }}"
      resource_group: "{{ resgrp }}"
      address_prefix: "192.168.0.0/24"
      security_group_name: "{{ resgrp }}"
      state: present

  - name: Create VM
    # We let Ansible take care of setting up details eg the NIC, public IP,
    # storage account, etc. so we don't need to deal with different naming
    # conventions and all that jazz.
    azure_rm_virtualmachine:
      resource_group: "{{ resgrp }}"
      name: "{{ vmname }}"
      vm_size: "{{ vmsize }}"
      virtual_network_name: "{{ resgrp }}"
      admin_username: core
      ssh_password_enabled: false
      public_ip_allocation_method: Static
      #data_disks:
      #  - lun: 0
      #    disk_size_gb: "{{ diskSize }}"
      #    managed_disk_type: Standard_LRS
      tags:
        role: "{{ role }}"
        owner: "{{ owner }}"
      image:
        offer: CoreOS
        publisher: CoreOS
        sku: Stable
        # This is close to - but not exactly - the CoreOS version used by the AWS AMI.
        version: 1235.5.0
      ssh_public_keys:
        - { path: "/home/core/.ssh/authorized_keys", key_data: "{{ lookup('file', '{{ keyname }}') }}"}
      custom_data: "{{ lookup('file', cloudconfig) }}"
